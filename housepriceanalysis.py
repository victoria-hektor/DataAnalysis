# -*- coding: utf-8 -*-
"""HousePriceAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14513djG3NNFCgLpv3W0UvEAtAT25xNIF

***Project: Predicting House Prices***

Step 1: Set Up Google Colab

Open Google Colab: Google Colab

Create a new notebook.

Step 2: Import Libraries

First, we'll need to import the necessary libraries.
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""***Step 3: Load the Dataset***

We'll use the "House Prices" dataset from Kaggle. For simplicity, we will load it directly from a URL.
"""

# Load the dataset
url = "https://raw.githubusercontent.com/selva86/datasets/master/BostonHousing.csv"
data = pd.read_csv(url)

# Display the first few rows of the dataset
data.head()

"""***Step 4: Exploratory Data Analysis (EDA)***

Let's perform some basic exploratory data analysis to understand the dataset.
"""

# Summary statistics
data.describe()

# Check for missing values
data.isnull().sum()

# Visualise the distribution of house prices
plt.figure(figsize=(10, 6))
sns.histplot(data['medv'], bins=30, kde=True)
plt.title('Distribution of House Prices')
plt.xlabel('Median Value of Owner-Occupied Homes ($1000s)')
plt.ylabel('Frequency')
plt.show()

"""***Step 5: Feature Selection and Preprocessing***

Select the features and prepare the data for modeling.
"""

# Define features and target variable
X = data.drop('medv', axis=1)
y = data['medv']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Display the shape of the training and testing sets
print(f'Training set: {X_train.shape}, {y_train.shape}')
print(f'Testing set: {X_test.shape}, {y_test.shape}')

"""***Step 6: Train a Simple Linear Regression Model***

Train a linear regression model to predict house prices.
"""

# Initialise and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

"""***Step 7: Evaluate the Model***

Evaluate the performance of the model using mean squared error and R-squared.
"""

# Calculate mean squared error and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared: {r2:.2f}')

"""***Step 8: Visualise the Results***

Visualise the actual vs. predicted house prices.
"""

# Plot actual vs. predicted house prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.7, color='b')
plt.plot([0, 50], [0, 50], '--k')
plt.xlabel('Actual House Prices ($1000s)')
plt.ylabel('Predicted House Prices ($1000s)')
plt.title('Actual vs. Predicted House Prices')
plt.show()